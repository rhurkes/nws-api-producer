{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50],"program":"/Users/z002qqy/.rustup/toolchains/beta-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","take_mut","/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","-C","metadata=b44046a824a00bb2","-C","extra-filename=-b44046a824a00bb2","--out-dir","/Users/z002qqy/code/personal/nws-api-producer/target/rls/debug/deps","-L","dependency=/Users/z002qqy/code/personal/nws-api-producer/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/z002qqy/.rustup/toolchains/beta-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,99,111,100,101,47,112,101,114,115,111,110,97,108,47,110,119,115,45,97,112,105,45,112,114,111,100,117,99,101,114,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,116,97,107,101,95,109,117,116,45,98,52,52,48,52,54,97,56,50,52,97,48,48,98,98,50,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"take_mut","disambiguator":[9538091140139743959,4598838724860396670]},"crate_root":"/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src","external_crates":[{"file_name":"/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[5176315762636812362,2114626227667244049]}},{"file_name":"/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[11338876038115862616,10217233059752591795]}},{"file_name":"/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16742304071404191458,4052345900235138361]}},{"file_name":"/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[14981555211719782656,12112262503804152647]}},{"file_name":"/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[14729594278364030725,2142984364133930581]}},{"file_name":"/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[16629121279540951807,13134475007303618281]}},{"file_name":"/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12811011273609263960,5919232390496765084]}},{"file_name":"/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[12227017100965921782,6034170437713613646]}},{"file_name":"/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[10341237497156314342,9783808673967482652]}}],"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":4487,"line_start":1,"line_end":147,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":4487,"line_start":1,"line_end":147,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":48},{"krate":0,"index":52}],"decl_id":null,"docs":" This crate provides several functions for handling `&mut T` including `take()`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scoped","qualname":"::scoped","value":"/Users/z002qqy/.cargo/registry/src/github.com-1ecc6299db9ec823/take_mut-0.2.2/src/scoped.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":42}],"decl_id":null,"docs":" This module provides a scoped API, allowing for taking an arbitrary number of `&mut T` into `T` within one closure.\n The references are all required to outlive the closure.","sig":null,"attributes":[{"value":"warn(missing_docs)","span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":5440,"byte_end":5462,"line_start":30,"line_end":30,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":18},"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":5688,"byte_end":5693,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Scope","qualname":"::scoped::Scope","value":"Scope {  }","parent":null,"children":[{"krate":0,"index":21},{"krate":0,"index":23}],"decl_id":null,"docs":" Represents a scope within which, it is possible to take a `T` from a `&mut T` as long as the `&mut T` outlives the scope.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":6058,"byte_end":6073,"line_start":49,"line_end":49,"column_start":12,"column_end":27},"name":"take_or_recover","qualname":"<Scope<'s>>::take_or_recover","value":"fn <'c, 'm, T, F> (&'c self, mut_ref: &'m mut T, recovery: F) -> (T, Hole<'c, 'm, T, F>)","parent":null,"children":[],"decl_id":null,"docs":" Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":6876,"byte_end":6880,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"take","qualname":"<Scope<'s>>::take","value":"fn <'c, 'm, T> (&'c self, mut_ref: &'m mut T) -> (T, Hole<'c, 'm, T, fn() -> T>)","parent":null,"children":[],"decl_id":null,"docs":" Takes a `(T, Hole<'c, 'm, T, F>)` from an `&'m mut T`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":30},"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":7281,"byte_end":7286,"line_start":84,"line_end":84,"column_start":8,"column_end":13},"name":"scope","qualname":"::scoped::scope","value":"fn <'s, F, R> (f: F) -> R","parent":null,"children":[],"decl_id":null,"docs":" Main function to create a `Scope`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":32},"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":8085,"byte_end":8089,"line_start":106,"line_end":106,"column_start":12,"column_end":16},"name":"Hole","qualname":"::scoped::Hole","value":"Hole {  }","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":65}],"decl_id":null,"docs":" A `Hole<'c, 'm, T, F>` represents an unfilled `&'m mut T` which must be filled before the end of the `Scope` with lifetime `'c` and recovery closure `F`.","sig":null,"attributes":[{"value":"must_use","span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":8061,"byte_end":8072,"line_start":105,"line_end":105,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":8346,"byte_end":8350,"line_start":115,"line_end":115,"column_start":12,"column_end":16},"name":"fill","qualname":"<Hole<'c, 'm, T, F>>::fill","value":"fn (self, t: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Fills the Hole.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":48},"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1276,"byte_end":1280,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"take","qualname":"::take","value":"fn <T, F> (mut_ref: &mut T, closure: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2675,"byte_end":2690,"line_start":81,"line_end":81,"column_start":8,"column_end":23},"name":"take_or_recover","qualname":"::take_or_recover","value":"fn <T, F, R> (mut_ref: &mut T, recover: R, closure: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Allows use of a value pointed to by `&mut T` as though it was owned, as long as a `T` is made available afterwards.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":5790,"byte_end":5795,"line_start":44,"line_end":44,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":8288,"byte_end":8292,"line_start":113,"line_end":113,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":8674,"byte_end":8678,"line_start":128,"line_end":128,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":44}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":706,"byte_end":712,"line_start":12,"line_end":12,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":8}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":5790,"byte_end":5795,"line_start":44,"line_end":44,"column_start":10,"column_end":15},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":8288,"byte_end":8292,"line_start":113,"line_end":113,"column_start":39,"column_end":43},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":32},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,122,48,48,50,113,113,121,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,116,97,107,101,95,109,117,116,45,48,46,50,46,50,47,115,114,99,47,115,99,111,112,101,100,46,114,115],"byte_start":8674,"byte_end":8678,"line_start":128,"line_end":128,"column_start":48,"column_end":52},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":32},"to":{"krate":2,"index":1922}}]}